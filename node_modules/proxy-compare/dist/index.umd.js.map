{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst TRACK_OBJECT_PROPERTY = 't';\nconst AFFECTED_PROPERTY = 'a';\nconst RECORD_USAGE_PROPERTY = 'r';\nconst RECORD_OBJECT_AS_USED_PROPERTY = 'u';\nconst ORIGINAL_OBJECT_PROPERTY = 'o';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// check if obj is a plain object or an array\nconst isPlainObject = <T>(obj: T): obj is T extends object ? T : never => {\n  try {\n    const proto = Object.getPrototypeOf(obj);\n    return proto === Object.prototype || proto === Array.prototype;\n  } catch (e) {\n    return false;\n  }\n};\n\n// check object type\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\nconst getPropDescs = (obj: object) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((descriptor) => {\n    descriptor.configurable = true;\n  });\n  return descriptors;\n};\n\n// copy obj if frozen\nconst unfreeze = (obj: object) => (\n  !Object.isFrozen(obj) ? obj\n    : Array.isArray(obj) ? Array.from(obj)\n      : /* otherwise */ Object.create(obj.constructor?.prototype || null, getPropDescs(obj))\n);\n\ntype Affected = WeakMap<object, Set<string | number | symbol>>;\ntype ProxyCache<T extends object> = WeakMap<object, ProxyHandler<T>>;\ntype ProxyHandler<T extends object> = {\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object>;\n  [AFFECTED_PROPERTY]?: Affected;\n  [TRACK_OBJECT_PROPERTY]: boolean;\n  [ORIGINAL_OBJECT_PROPERTY]: T;\n  [RECORD_USAGE_PROPERTY](key: string | number | symbol): void;\n  [RECORD_OBJECT_AS_USED_PROPERTY](): void;\n  get(target: T, key: string | number | symbol): unknown;\n  has(target: T, key: string | number | symbol): boolean;\n  ownKeys(target: T): (string | number | symbol)[];\n  set?(target: T, key: string | number | symbol, value: unknown): boolean;\n  deleteProperty?(target: T, key: string | number | symbol): boolean;\n};\n\nconst createProxyHandler = <T extends object>(origObj: T) => {\n  const handler: ProxyHandler<T> = {\n    [ORIGINAL_OBJECT_PROPERTY]: origObj,\n    [TRACK_OBJECT_PROPERTY]: false, // for trackMemo\n    [RECORD_USAGE_PROPERTY](key) {\n      if (!this[TRACK_OBJECT_PROPERTY]) {\n        let used = (this[AFFECTED_PROPERTY] as Affected).get(this[ORIGINAL_OBJECT_PROPERTY]);\n        if (!used) {\n          used = new Set();\n          (this[AFFECTED_PROPERTY] as Affected).set(this[ORIGINAL_OBJECT_PROPERTY], used);\n        }\n        used.add(key);\n      }\n    },\n    [RECORD_OBJECT_AS_USED_PROPERTY]() {\n      this[TRACK_OBJECT_PROPERTY] = true;\n      (this[AFFECTED_PROPERTY] as Affected).delete(this[ORIGINAL_OBJECT_PROPERTY]);\n    },\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return this[ORIGINAL_OBJECT_PROPERTY];\n      }\n      this[RECORD_USAGE_PROPERTY](key);\n      return createDeepProxy(\n        (target as any)[key],\n        (this[AFFECTED_PROPERTY] as Affected),\n        this[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        this[RECORD_OBJECT_AS_USED_PROPERTY]();\n        return true;\n      }\n      // LIMITATION:\n      // We simply record the same as get.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if 'a' in obj is handled.\n      this[RECORD_USAGE_PROPERTY](key);\n      return key in target;\n    },\n    ownKeys(target) {\n      this[RECORD_USAGE_PROPERTY](OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (Object.isFrozen(origObj)) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return handler;\n};\n\n/**\n * create a proxy\n *\n * It will recursively create a proxy upon access.\n *\n * @example\n * import { createDeepProxy } from 'proxy-compare';\n *\n * const obj = ...;\n * const affected = new WeakMap();\n * const proxy = createDeepProxy(obj, affected);\n */\nexport const createDeepProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isPlainObject(obj)) return obj;\n  const origObj = (\n    obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj }\n  )[GET_ORIGINAL_SYMBOL]; // unwrap proxy\n  const target = origObj || obj;\n  let proxyHandler: ProxyHandler<typeof target> | undefined = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!proxyHandler) {\n    proxyHandler = createProxyHandler<T extends object ? T : never>(target);\n    proxyHandler[PROXY_PROPERTY] = new Proxy(unfreeze(target), proxyHandler) as typeof target;\n    if (proxyCache) {\n      proxyCache.set(target, proxyHandler);\n    }\n  }\n  proxyHandler[AFFECTED_PROPERTY] = affected as Affected;\n  proxyHandler[PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return proxyHandler[PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (origObj: object, nextObj: object) => {\n  const origKeys = Reflect.ownKeys(origObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return origKeys.length !== nextKeys.length\n    || origKeys.some((k, i) => k !== nextKeys[i]);\n};\n\nexport const MODE_ASSUME_UNCHANGED_IF_UNAFFECTED = /*   */ 0b00001;\nexport const MODE_IGNORE_REF_EQUALITY = /*              */ 0b00010;\n\nconst IN_DEEP_SHIFT = 2;\nexport const MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP = (\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED << IN_DEEP_SHIFT\n);\nexport const MODE_IGNORE_REF_EQUALITY_IN_DEEP = (\n  MODE_IGNORE_REF_EQUALITY << IN_DEEP_SHIFT\n);\n\ntype DeepChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * compare two object\n *\n * It will compare only with affected object properties\n *\n * @example\n * import { isDeepChanged } from 'proxy-compare';\n *\n * const objToCompare = ...;\n * const changed = isDeepChanged(obj, objToCompare, affected);\n */\nexport const isDeepChanged = (\n  origObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n  mode = 0,\n): boolean => {\n  if (Object.is(origObj, nextObj) && (\n    !isObject(origObj) || (mode & MODE_IGNORE_REF_EQUALITY) === 0)\n  ) {\n    return false;\n  }\n  if (!isObject(origObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(origObj);\n  if (!used) return (mode & MODE_ASSUME_UNCHANGED_IF_UNAFFECTED) === 0;\n  if (cache && (mode & MODE_IGNORE_REF_EQUALITY) === 0) {\n    const hit = (cache as DeepChangedCache).get(origObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as DeepChangedCache).set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(origObj, nextObj)\n      : isDeepChanged(\n        (origObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n        ((mode >>> IN_DEEP_SHIFT) << IN_DEEP_SHIFT) | (mode >>> IN_DEEP_SHIFT),\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = (mode & MODE_ASSUME_UNCHANGED_IF_UNAFFECTED) === 0;\n  if (cache && (mode & MODE_IGNORE_REF_EQUALITY) === 0) {\n    cache.set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isPlainObject(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n// get original object from proxy\nexport const getUntrackedObject = <T>(obj: T): T | null => {\n  if (isPlainObject(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | number | symbol)[][] = [];\n  const walk = (x: unknown, path?: (string | number | symbol)[]) => {\n    const used = (affected as Affected).get(x as object);\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n"],"names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","GET_ORIGINAL_SYMBOL","isPlainObject","obj","proto","Object","getPrototypeOf","prototype","Array","e","isObject","x","createDeepProxy","affected","proxyCache","origObj","handler","target","proxyHandler","get","key","this","used","Set","set","add","has","ownKeys","Reflect","isFrozen","deleteProperty","Proxy","isArray","from","create","constructor","descriptors","getOwnPropertyDescriptors","values","forEach","descriptor","configurable","getPropDescs","unfreeze","isOwnKeysChanged","nextObj","origKeys","nextKeys","length","some","k","i","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_IGNORE_REF_EQUALITY","list","walk","path","push","isDeepChanged","cache","mode","is","hit","changed","c"],"mappings":"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"}